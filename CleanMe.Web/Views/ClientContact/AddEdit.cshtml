@using CleanMe.Application.ViewModels
@using CleanMe.Domain.Enums
@using CleanMe.Shared.Helpers

@model CleanMe.Application.ViewModels.ClientContactViewModel

@{
    ViewData["Title"] = Model.clientContactId == 0 ? "Add Client Contact" : "Edit Client Contact";
}

<h2>@ViewData["Title"]</h2>

<form asp-action="AddEdit" method="post" id="ClientContactForm" novalidate>
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    <input asp-for="clientContactId" type="hidden" />
    <input asp-for="ApplicationUserId" type="hidden" />
    <input asp-for="clientId" type="hidden" />
    <input asp-for="ClientName" type="hidden" />
    <input type="hidden" name="ReturnUrl" value="@ViewBag.ReturnUrl" />
    <input type="hidden" id="ShowPasswordSection" name="ShowPasswordSection" value="@Model.ShowPasswordSection.ToString().ToLower()" />

    <div class="form-group">
        <label class="form-label">Client Name </label>
        <div class="form-control-plaintext">@Model.ClientName</div>
    </div>

    <div class="form-group">
        <label asp-for="FirstName" class="form-label"></label>
        <input asp-for="FirstName" class="form-control" required />
        <span asp-validation-for="FirstName" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="FamilyName" class="form-label"></label>
        <input asp-for="FamilyName" class="form-control" required />
        <span asp-validation-for="FamilyName" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="PhoneMobile" class="form-label"></label>
        <input asp-for="PhoneMobile" class="form-control" />
    </div>

    @Html.LabeledTextBoxFor(model => model.Email)
@*     <div class="form-group">
        <label asp-for="Email" class="form-label"></label>
        <input type="email" id="emailInput" name="Email" class="form-control" asp-for="Email" required />
        <span id="emailStatus" class="text-danger"></span>
    </div> *@

    @Html.LabeledTextBoxFor(model => model.JobTitle)
@*     <div class="form-group">
        <label asp-for="JobTitle" class="form-label"></label>
        <input asp-for="JobTitle" class="form-control" />
    </div> *@

    @Html.YesNoButtonsFor(model => model.IsActive)
@*     <div class="mb-3">
        <label class="form-label">Is Active</label>
        <select asp-for="IsActive" class="form-control">
            <option value="true">Active</option>
            <option value="false">Inactive</option>
        </select>
    </div> *@

    <!-- User Login Section -->
    <div class="mb-3">
        <button type="button" id="toggleUserLogin" class="btn btn-info">
            @(string.IsNullOrWhiteSpace(Model.ApplicationUserId) ? "Create User Login" : "Change Password")
        </button>
    </div>

    <div id="passwordSection" style="display:@(Model.ShowPasswordSection ? "block" : "none")">
        @Html.EditorFor(model => model.ChangePassword, "_ChangePasswordPartialView")
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <a href="@ViewBag.ReturnUrl" class="btn btn-secondary">Cancel</a>
    @* <a asp-action="Index" class="btn btn-secondary">Cancel</a> *@
</form>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const toggleButton = document.getElementById("toggleUserLogin");
            const passwordSection = document.getElementById("passwordSection");
            const hiddenField = document.getElementById("ShowPasswordSection");
            const emailInput = document.getElementById("emailInput");
            const emailStatus = document.getElementById("emailStatus");
            const form = document.getElementById("ClientContactForm");

            if (toggleButton) {
                toggleButton.addEventListener("click", function () {
                const visible = passwordSection.style.display === "block";
                const nowVisible = !visible;

                passwordSection.style.display = nowVisible ? "block" : "none";
                hiddenField.value = nowVisible.toString().toLowerCase(); // sync to "true"/"false"
                console.log("Toggle clicked. Now visible:", nowVisible);
            });
            }


            if (emailInput) {
                emailInput.addEventListener("blur", function () {
                    debugger;

                    let email = emailInput.value.trim();
                    let clientContactId = "@Model.clientContactId";

                    if (email === "") {
                        emailStatus.textContent = "";
                        return;
                    }

                    fetch(`/ClientContact/IsEmailAvailable?email=${encodeURIComponent(email)}&clientContactId=${clientContactId}`)
                        .then(response => response.json())
                        .then(isAvailable => {
                            if (!isAvailable) {
                                emailStatus.textContent = "This email is already in use.";
                                emailStatus.style.color = "red";
                            } else {
                                emailStatus.textContent = "";
                            }
                        })
                        .catch(error => {
                            emailStatus.textContent = "Error checking email.";
                            emailStatus.style.color = "red";
                        });
                });
            }

            form.addEventListener("submit", function (event) {
                debugger;

                const mobilePhone = document.querySelector("[name='PhoneMobile']").value.trim();
                const email = document.querySelector("[name='Email']").value.trim();

                if (!mobilePhone && !email) {
                    event.preventDefault();
                    alert("At least one contact detail (Mobile Phone or Email) is required.");
                }
            });
        });
    </script>
}